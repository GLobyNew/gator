// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
WITH NP AS (
    INSERT INTO posts(id, created_at, updated_at, published_at, title, url, description, feed_id)
    VALUES(
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8
    )
    RETURNING id, created_at, updated_at, published_at, title, url, description, feed_id
)
SELECT 
    np.id, np.created_at, np.updated_at, np.published_at, np.title, np.url, np.description, np.feed_id,
    feeds.name as feed_name
FROM 
    NP
INNER JOIN feeds ON NP.feed_id = feeds.id
`

type CreatePostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	PublishedAt time.Time
	Title       string
	Url         string
	Description string
	FeedID      uuid.UUID
}

type CreatePostRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	PublishedAt time.Time
	Title       string
	Url         string
	Description string
	FeedID      uuid.UUID
	FeedName    string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PublishedAt,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.FeedID,
	)
	var i CreatePostRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.FeedID,
		&i.FeedName,
	)
	return i, err
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT 
    posts.id,
    posts.title,
    posts.url,
    posts.description,
    posts.published_at,
    feeds.id AS feed_id,
    feeds.name AS feed_name,
    users.id AS user_id,
    users.name AS user_name
FROM 
    posts
INNER JOIN
    feeds ON posts.feed_id = feeds.id
INNER JOIN 
    users ON feeds.user_id = users.id
WHERE 
    users.id = $1
ORDER BY posts.published_at
LIMIT $2
`

type GetPostsByUserParams struct {
	ID    uuid.UUID
	Limit int32
}

type GetPostsByUserRow struct {
	ID          uuid.UUID
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	FeedID      uuid.UUID
	FeedName    string
	UserID      uuid.UUID
	UserName    string
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]GetPostsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserRow
	for rows.Next() {
		var i GetPostsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.FeedName,
			&i.UserID,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
